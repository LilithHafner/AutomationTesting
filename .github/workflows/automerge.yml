name: Automerge
on:
  check_suite:

permissions:
  contents: write

jobs:
  try-automerge:
    runs-on: ubuntu-latest
    if: ${{ github.event.check_suite.conclusion == "success" }}
    steps:
      - name: Check for approval and merge me label
        uses: actions/github-script@v7
        with:
          script: |
            // Fetch PRs
            const { data: prs } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.check_suite.head_sha,
            });

            // Process each PR
            for (const pr of prs) {
              if (pr.head.sha == context.check_suite.head_sha && // double check, should be redundant
                  pr.labels.any(l -> l.name === "merge me")
              ) {  
                /* const { data: members } = await github.rest.teams.listMembersInOrg({ // TODO: ensure that access token as adequate perms for this
                  org: "JuliaLang",
                  team_slug: "committers",
                  per_page: 100,
                });
                member_logins = members.map(member => member.login); */
                member_logins = ["LilithHafner", "LilithHafnerBot"]; // TODO use committers in production

                const { data: reviews } = await github.pulls.listReviews({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                });

                var approved = false;
                var blocked = false;
                for (const review of reviews) {
                  blocked = blocked || review.state === "CHANGES_REQUESTED";
                  approved = approved || review.state === "APPROVED && member_logins.contains(review.user.login);
                }
                
                if (approved && !blocked) {
                  await github.rest.pulls.merge({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                    merge_method: "squash"
                  });
                  break; // Only merge at most 1 PR
                };
              }
            }
